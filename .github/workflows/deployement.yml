name: Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: fourth-scheme-461516-n2
  GAR_LOCATION: us-west1
  REPO_NAME: repo
  IMAGE_NAME: iris-api
  CLUSTER_NAME: gke-cluster-iris
  CLUSTER_ZONE: us-west1
  DEPLOYMENT_NAME: iris-deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Authenticate and Set up GKE Auth Plugin
      env:
        GCP_CREDENTIALS_B64: ${{ secrets.GCP_SA_KEYS }}
      run: |
        gcloud components install gke-gcloud-auth-plugin
        echo "$GCP_CREDENTIALS_B64" | base64 -d > gcp-key.json
        gcloud auth activate-service-account --key-file=gcp-key.json
        gcloud config set project ${{ env.PROJECT_ID }}
        
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
        
    - name: Build and Tag Docker image
      run: |
        docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest .
        
    - name: Push Docker image to Artifact Registry
      run: |
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Get GKE cluster credentials
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }}
        
    - name: Deploy to GKE
      run: |
        IMAGE_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest"
        # Update the image placeholder in the deployment file
        # Note: I've corrected the filename from 'deployement.yml' to 'deployment.yml'. Please ensure your file is named correctly.
        sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_URL|g" k8/deployment.yml
        
        # Apply all manifests explicitly for clarity and control.
        # This will now apply the service, deployment, and the new HPA.
        echo "Applying Kubernetes manifests..."
        kubectl apply -f k8/service.yml
        kubectl apply -f k8/deployement.yml
        kubectl apply -f k8/hpa.yaml
        echo "Manifests applied successfully."

    - name: Run smoke test on live endpoint
      run: |
        echo "Waiting for external IP address..."
        for i in {1..20}; do
          IP_ADDRESS=$(kubectl get service iris-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$IP_ADDRESS" ]; then
            echo "External IP found: $IP_ADDRESS"
            break
          fi
          echo "Attempt $i/20: IP not available yet. Waiting 15 seconds..."
          sleep 15
        done

        if [ -z "$IP_ADDRESS" ]; then
          echo "Error: Failed to get external IP address for iris-service after 5 minutes."
          kubectl describe service iris-service
          exit 1
        fi
        
        echo "Running curl test against /predict/ endpoint..."
        curl -s -X 'POST' "http://$IP_ADDRESS/predict/" \
          -H 'Content-Type: application/json' \
          -d '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}' \
          | grep '"prediction_class":"setosa"'
          
        echo "Smoke test passed!"
